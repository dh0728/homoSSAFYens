package com.example.dive

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView
import com.example.dive.data.model.Weather6hItem

class Weather6hAdapter(private var items: List<Weather6hItem>) :
    RecyclerView.Adapter<Weather6hAdapter.Weather6hViewHolder>() {

    class Weather6hViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val tvTime: TextView = itemView.findViewById(R.id.tvTime6h)
        val tvSkyTemp: TextView = itemView.findViewById(R.id.tvSkyTemp6h)
        val tvRainHumidity: TextView = itemView.findViewById(R.id.tvRainHumidity6h)
        val tvWindWave: TextView = itemView.findViewById(R.id.tvWindWave6h)
        val tvDust: TextView = itemView.findViewById(R.id.tvDust6h)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): Weather6hViewHolder {
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.item_weather6h, parent, false)
        return Weather6hViewHolder(view)
    }

    override fun onBindViewHolder(holder: Weather6hViewHolder, position: Int) {
        val item = items[position]

        // ‚úÖ Ïò§Ï†Ñ/Ïò§ÌõÑ hÏãú Ìè¨Îß∑
        val hour = item.time.substring(11, 13).toInt()
        val ampm = if (hour < 12) "Ïò§Ï†Ñ" else "Ïò§ÌõÑ"
        val displayHour = if (hour % 12 == 0) 12 else hour % 12
        val timeFormatted = "$ampm ${displayHour}Ïãú"

        val temp = item.tempC.toInt()
        val humidity = item.humidityPct.toInt()
        val wind = item.windSpeedMs.toInt()
        val wave = item.waveHeightM?.toDoubleOrNull()?.let { "${it}m" } ?: "Ï†ïÎ≥¥ ÏóÜÏùå"
        val rain = item.rainMm.toInt()
        val emoji = getWeatherEmojiFromSky(item.sky)

        holder.tvTime.text = timeFormatted
        holder.tvSkyTemp.text = "$emoji ${item.sky} ¬∑ ${temp}‚ÑÉ"
        holder.tvRainHumidity.text = "Í∞ïÏàòÎüâ: ${rain}mm ¬∑ ÏäµÎèÑ: ${humidity}%"
        holder.tvWindWave.text = "ÌíçÌñ•: ${item.windDir} ¬∑ ÌíçÏÜç: ${wind}m/s ¬∑ ÌååÍ≥†: $wave"
        holder.tvDust.text = "PM10: ${item.pm10S} ¬∑ PM2.5: ${item.pm25S}"
    }


    override fun getItemCount(): Int = items.size

    fun updateWeather(newItems: List<Weather6hItem>) {
        items = newItems
        notifyDataSetChanged()
    }

    // ‚úÖ sky ‚Üí emoji Îß§Ìïë
    private fun getWeatherEmojiFromSky(sky: String): String {
        return when {
            sky.contains("ÎßëÏùå") -> "‚òÄÔ∏è"
            sky.contains("Íµ¨Î¶ÑÎßéÏùå") -> "‚òÅÔ∏è"
            sky.contains("Íµ¨Î¶ÑÏ°∞Í∏à") -> "üå§Ô∏è"
            sky.contains("ÌùêÎ¶º") -> "‚òÅÔ∏è"
            sky.contains("ÎπÑ/Îàà") -> "üåßÔ∏è"
            sky.contains("ÎπÑ") -> "üåßÔ∏è"
            sky.contains("Îàà") -> "üå®Ô∏è"
            else -> "‚ùî"
        }
    }
}
